// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file auth.proto (package boxey.auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Add device metrics
 *
 * @generated from message boxey.auth.UserRegisterRequest
 */
export class UserRegisterRequest extends Message<UserRegisterRequest> {
  /**
   * @generated from field: string nickname = 1;
   */
  nickname = "";

  constructor(data?: PartialMessage<UserRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.auth.UserRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRegisterRequest {
    return new UserRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined, b: UserRegisterRequest | PlainMessage<UserRegisterRequest> | undefined): boolean {
    return proto3.util.equals(UserRegisterRequest, a, b);
  }
}

/**
 * @generated from message boxey.auth.UserRegisterReply
 */
export class UserRegisterReply extends Message<UserRegisterReply> {
  /**
   * @generated from oneof boxey.auth.UserRegisterReply.register_reply
   */
  registerReply: {
    /**
     * @generated from field: string error_message = 1;
     */
    value: string;
    case: "errorMessage";
  } | {
    /**
     * @generated from field: string session_auth = 2;
     */
    value: string;
    case: "sessionAuth";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UserRegisterReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.auth.UserRegisterReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "register_reply" },
    { no: 2, name: "session_auth", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "register_reply" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRegisterReply {
    return new UserRegisterReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRegisterReply {
    return new UserRegisterReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRegisterReply {
    return new UserRegisterReply().fromJsonString(jsonString, options);
  }

  static equals(a: UserRegisterReply | PlainMessage<UserRegisterReply> | undefined, b: UserRegisterReply | PlainMessage<UserRegisterReply> | undefined): boolean {
    return proto3.util.equals(UserRegisterReply, a, b);
  }
}

