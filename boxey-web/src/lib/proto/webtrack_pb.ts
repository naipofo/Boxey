// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file webtrack.proto (package boxey.webtrack, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StatusDetails } from "./packages_pb.js";

/**
 * Add device metrics
 *
 * @generated from message boxey.webtrack.TrackPackageRequest
 */
export class TrackPackageRequest extends Message<TrackPackageRequest> {
  /**
   * @generated from field: string uid = 1;
   */
  uid = "";

  constructor(data?: PartialMessage<TrackPackageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.webtrack.TrackPackageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPackageRequest {
    return new TrackPackageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPackageRequest {
    return new TrackPackageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPackageRequest {
    return new TrackPackageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TrackPackageRequest | PlainMessage<TrackPackageRequest> | undefined, b: TrackPackageRequest | PlainMessage<TrackPackageRequest> | undefined): boolean {
    return proto3.util.equals(TrackPackageRequest, a, b);
  }
}

/**
 * @generated from message boxey.webtrack.TrackPackageReply
 */
export class TrackPackageReply extends Message<TrackPackageReply> {
  /**
   * @generated from field: repeated boxey.packages.StatusDetails status = 1;
   */
  status: StatusDetails[] = [];

  constructor(data?: PartialMessage<TrackPackageReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.webtrack.TrackPackageReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: StatusDetails, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPackageReply {
    return new TrackPackageReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPackageReply {
    return new TrackPackageReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPackageReply {
    return new TrackPackageReply().fromJsonString(jsonString, options);
  }

  static equals(a: TrackPackageReply | PlainMessage<TrackPackageReply> | undefined, b: TrackPackageReply | PlainMessage<TrackPackageReply> | undefined): boolean {
    return proto3.util.equals(TrackPackageReply, a, b);
  }
}

