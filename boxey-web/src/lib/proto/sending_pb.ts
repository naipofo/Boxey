// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file sending.proto (package boxey.sending, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * TODO: rework sending to make more sense
 * sender_id and sender relation does not make much sense!
 *
 * @generated from message boxey.sending.PackageSendRequest
 */
export class PackageSendRequest extends Message<PackageSendRequest> {
  /**
   * @generated from field: string uid = 1;
   */
  uid = "";

  /**
   * @generated from field: string destination_id = 2;
   */
  destinationId = "";

  /**
   * @generated from field: int64 size_id = 3;
   */
  sizeId = protoInt64.zero;

  /**
   * @generated from field: string sender = 4;
   */
  sender = "";

  /**
   * @generated from field: optional string recipient_nickname = 5;
   */
  recipientNickname?: string;

  constructor(data?: PartialMessage<PackageSendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.sending.PackageSendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "recipient_nickname", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackageSendRequest {
    return new PackageSendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackageSendRequest {
    return new PackageSendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackageSendRequest {
    return new PackageSendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PackageSendRequest | PlainMessage<PackageSendRequest> | undefined, b: PackageSendRequest | PlainMessage<PackageSendRequest> | undefined): boolean {
    return proto3.util.equals(PackageSendRequest, a, b);
  }
}

/**
 * @generated from message boxey.sending.PackageSendReply
 */
export class PackageSendReply extends Message<PackageSendReply> {
  constructor(data?: PartialMessage<PackageSendReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.sending.PackageSendReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackageSendReply {
    return new PackageSendReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackageSendReply {
    return new PackageSendReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackageSendReply {
    return new PackageSendReply().fromJsonString(jsonString, options);
  }

  static equals(a: PackageSendReply | PlainMessage<PackageSendReply> | undefined, b: PackageSendReply | PlainMessage<PackageSendReply> | undefined): boolean {
    return proto3.util.equals(PackageSendReply, a, b);
  }
}

/**
 * @generated from message boxey.sending.SizeListRequest
 */
export class SizeListRequest extends Message<SizeListRequest> {
  constructor(data?: PartialMessage<SizeListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.sending.SizeListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SizeListRequest {
    return new SizeListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SizeListRequest {
    return new SizeListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SizeListRequest {
    return new SizeListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SizeListRequest | PlainMessage<SizeListRequest> | undefined, b: SizeListRequest | PlainMessage<SizeListRequest> | undefined): boolean {
    return proto3.util.equals(SizeListRequest, a, b);
  }
}

/**
 * @generated from message boxey.sending.SizeListReply
 */
export class SizeListReply extends Message<SizeListReply> {
  /**
   * @generated from field: repeated boxey.sending.Size sizes = 1;
   */
  sizes: Size[] = [];

  constructor(data?: PartialMessage<SizeListReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.sending.SizeListReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sizes", kind: "message", T: Size, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SizeListReply {
    return new SizeListReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SizeListReply {
    return new SizeListReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SizeListReply {
    return new SizeListReply().fromJsonString(jsonString, options);
  }

  static equals(a: SizeListReply | PlainMessage<SizeListReply> | undefined, b: SizeListReply | PlainMessage<SizeListReply> | undefined): boolean {
    return proto3.util.equals(SizeListReply, a, b);
  }
}

/**
 * @generated from message boxey.sending.Size
 */
export class Size extends Message<Size> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string size = 2;
   */
  size = "";

  constructor(data?: PartialMessage<Size>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.sending.Size";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Size {
    return new Size().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Size {
    return new Size().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Size {
    return new Size().fromJsonString(jsonString, options);
  }

  static equals(a: Size | PlainMessage<Size> | undefined, b: Size | PlainMessage<Size> | undefined): boolean {
    return proto3.util.equals(Size, a, b);
  }
}

