// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file lockers.proto (package boxey.lockers, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message boxey.lockers.LockersListRequest
 */
export class LockersListRequest extends Message<LockersListRequest> {
  constructor(data?: PartialMessage<LockersListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.lockers.LockersListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockersListRequest {
    return new LockersListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockersListRequest {
    return new LockersListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockersListRequest {
    return new LockersListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LockersListRequest | PlainMessage<LockersListRequest> | undefined, b: LockersListRequest | PlainMessage<LockersListRequest> | undefined): boolean {
    return proto3.util.equals(LockersListRequest, a, b);
  }
}

/**
 * @generated from message boxey.lockers.LockersListerReply
 */
export class LockersListerReply extends Message<LockersListerReply> {
  /**
   * @generated from field: repeated boxey.lockers.Locker Lockers = 1;
   */
  Lockers: Locker[] = [];

  constructor(data?: PartialMessage<LockersListerReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.lockers.LockersListerReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Lockers", kind: "message", T: Locker, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockersListerReply {
    return new LockersListerReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockersListerReply {
    return new LockersListerReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockersListerReply {
    return new LockersListerReply().fromJsonString(jsonString, options);
  }

  static equals(a: LockersListerReply | PlainMessage<LockersListerReply> | undefined, b: LockersListerReply | PlainMessage<LockersListerReply> | undefined): boolean {
    return proto3.util.equals(LockersListerReply, a, b);
  }
}

/**
 * TODO: add available sizes
 *
 * @generated from message boxey.lockers.Locker
 */
export class Locker extends Message<Locker> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string location = 2;
   */
  location = "";

  /**
   * @generated from field: string location_human = 3;
   */
  locationHuman = "";

  constructor(data?: PartialMessage<Locker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "boxey.lockers.Locker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "location_human", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Locker {
    return new Locker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Locker {
    return new Locker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Locker {
    return new Locker().fromJsonString(jsonString, options);
  }

  static equals(a: Locker | PlainMessage<Locker> | undefined, b: Locker | PlainMessage<Locker> | undefined): boolean {
    return proto3.util.equals(Locker, a, b);
  }
}

